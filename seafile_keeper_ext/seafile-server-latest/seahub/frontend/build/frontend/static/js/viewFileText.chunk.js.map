{"version":3,"sources":["view-file-text.js"],"names":["window","app","pageOptions","err","fileExt","fileContent","repoID","filePath","fileName","canEditFile","username","options","lineNumbers","mode","Utils","chooseLanguage","extraKeys","theme","textWrapping","lineWrapping","readOnly","cursorBlinkRate","ViewFileText","props","updateContent","newContent","setState","needSave","content","addParticipant","seafileAPI","addFileParticipants","then","res","status","isParticipant","getParticipants","listFileParticipants","participants","data","participant_list","length","every","participant","email","onParticipantsChange","state","isSaving","onSave","bind","this","getUpdateLink","uploadLink","updateFile","toaster","success","gettext","duration","FileContent","React","Component","className","ref","value","onChange","ReactDOM","render","document","getElementById"],"mappings":"2ZA2BIA,OAAOC,IAAIC,YADbC,E,EAAAA,IAAKC,E,EAAAA,QAASC,E,EAAAA,YAAaC,E,EAAAA,OAAQC,E,EAAAA,SAAUC,E,EAAAA,SAAUC,E,EAAAA,YAAaC,E,EAAAA,SAGhEC,EAAU,CACdC,aAAa,EACbC,KAAMC,IAAMC,eAAeX,GAC3BY,UAAW,CAAC,KAAQ,gBACpBC,MAAO,UACPC,cAAc,EACdC,cAAc,EACdC,UAAWX,EACXY,gBAAiBZ,EAAc,KAAO,GAGlCa,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,cAAgB,SAACC,GACf,EAAKC,SAAS,CACZC,UAAU,EACVC,QAASH,KAhBM,EAiDnBI,eAAiB,WACfC,IAAWC,oBAAoBzB,EAAQC,EAAU,CAACG,IAAWsB,MAAK,SAACC,GAC9C,MAAfA,EAAIC,SACN,EAAKC,eAAgB,EACrB,EAAKC,uBArDQ,EA0DnBA,gBAAkB,WAChBN,IAAWO,qBAAqB/B,EAAQC,GAAUyB,MAAK,SAACC,GACtD,IAAMK,EAAeL,EAAIM,KAAKC,iBAC9B,EAAKd,SAAS,CAAEY,aAAcA,IAC1BA,EAAaG,OAAS,IACxB,EAAKN,cAAgBG,EAAaI,OAAM,SAACC,GACvC,OAAOA,EAAYC,OAASlC,UAhEjB,EAsEnBmC,qBAAuB,WACrB,EAAKT,mBArEL,EAAKU,MAAQ,CACXlB,QAASvB,EACTsB,UAAU,EACVoB,UAAU,EACVT,aAAc,IAEhB,EAAKU,OAAO,EAAKA,OAAOC,KAAZ,gBACZ,EAAKd,eAAgB,EATJ,E,0CAoBnB,WAAW,IAAD,OACHe,KAAKf,eACRe,KAAKrB,iBAGP,OACEC,IAAWqB,cAAc7C,EAFb,KAE8B0B,MAAK,SAACC,GAC9C,IAAMmB,EAAanB,EAAIM,KAIvB,OAHA,EAAKb,SAAS,CACZqB,UAAU,IAELjB,IAAWuB,WAChBD,EACA7C,EACAC,EACA,EAAKsC,MAAMlB,SACXI,MAAK,WACLsB,IAAQC,QAAQC,aAAQ,sBAAuB,CAC7CC,SAAU,IAEZ,EAAK/B,SAAS,CACZqB,UAAU,EACVpB,UAAU,Y,+BAgCpB,WACEuB,KAAKd,oB,oBAGP,WACE,OACE,cAAC,IAAD,CACER,QACE,cAAC8B,EAAD,CACE9B,QAASsB,KAAKJ,MAAMlB,QACpBJ,cAAe0B,KAAK1B,gBAGxBuB,SAAUG,KAAKJ,MAAMC,SACrBpB,SAAUuB,KAAKJ,MAAMnB,SACrBqB,OAAQE,KAAKF,OACbV,aAAcY,KAAKJ,MAAMR,aACzBO,qBAAsBK,KAAKL,2B,GA5FRc,IAAMC,WAuG3BF,E,4JACJ,WACE,OAAIvD,EACK,cAAC,IAAD,IAGP,qBAAK0D,UAAU,0CAAf,SACE,cAAC,IAAD,CACEC,IAAI,qBACJC,MAAOb,KAAK3B,MAAMK,QAClBjB,QAASA,EACTqD,SAAUd,KAAK3B,MAAMC,sB,GAXLmC,IAAMC,WAoBhCK,IAASC,OACP,cAAC5C,EAAD,IACA6C,SAASC,eAAe,c","file":"static/js/viewFileText.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport toaster from './components/toast';\nimport { Utils } from './utils/utils';\nimport { gettext } from './utils/constants';\nimport FileView from './components/file-view/file-view';\nimport FileViewTip from './components/file-view/file-view-tip';\nimport { seafileAPI } from './utils/seafile-api';\n\nimport CodeMirror from 'react-codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/clike/clike';\nimport 'codemirror/mode/php/php';\nimport 'codemirror/mode/sql/sql';\nimport 'codemirror/mode/vue/vue';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/go/go';\nimport 'codemirror/mode/python/python';\nimport 'codemirror/mode/htmlmixed/htmlmixed';\nimport 'codemirror/lib/codemirror.css';\n\nimport './css/text-file-view.css';\n\nconst {\n  err, fileExt, fileContent, repoID, filePath, fileName, canEditFile, username\n} = window.app.pageOptions;\n\nconst options = {\n  lineNumbers: true,\n  mode: Utils.chooseLanguage(fileExt),\n  extraKeys: {'Ctrl': 'autocomplete'},\n  theme: 'default',\n  textWrapping: true,\n  lineWrapping: true,\n  readOnly: !canEditFile,\n  cursorBlinkRate: canEditFile ? 530 : -1,   // default is 530ms\n};\n\nclass ViewFileText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: fileContent,\n      needSave: false,\n      isSaving: false,\n      participants: [],\n    };\n    this.onSave=this.onSave.bind(this);\n    this.isParticipant = false;\n  }\n\n\n  updateContent = (newContent) => {\n    this.setState({\n      needSave: true,\n      content: newContent,\n    });\n  }\n\n  onSave () {\n    if (!this.isParticipant) {\n      this.addParticipant();\n    }\n    let dirPath = '/';\n    return (\n      seafileAPI.getUpdateLink(repoID, dirPath).then((res) => {\n        const uploadLink = res.data;\n        this.setState({\n          isSaving: true\n        });\n        return seafileAPI.updateFile(\n          uploadLink,\n          filePath,\n          fileName,\n          this.state.content\n        ).then(() => {\n          toaster.success(gettext('Successfully saved'), {\n            duration: 2\n          });\n          this.setState({\n            isSaving: false,\n            needSave: false\n          });\n        });\n      })\n    );\n  }\n\n  addParticipant = () => {\n    seafileAPI.addFileParticipants(repoID, filePath, [username]).then((res) => {\n      if (res.status === 200) {\n        this.isParticipant = true;\n        this.getParticipants();\n      }\n    });\n  }\n\n  getParticipants = () => {\n    seafileAPI.listFileParticipants(repoID, filePath).then((res) => {\n      const participants = res.data.participant_list;\n      this.setState({ participants: participants });\n      if (participants.length > 0) {\n        this.isParticipant = participants.every((participant) => {\n          return participant.email == username;\n        });\n      }\n    });\n  }\n\n  onParticipantsChange = () => {\n    this.getParticipants();\n  }\n\n  componentDidMount() {\n    this.getParticipants();\n  }\n\n  render() {\n    return (\n      <FileView\n        content={\n          <FileContent\n            content={this.state.content}\n            updateContent={this.updateContent}\n          />\n        }\n        isSaving={this.state.isSaving}\n        needSave={this.state.needSave}\n        onSave={this.onSave}\n        participants={this.state.participants}\n        onParticipantsChange={this.onParticipantsChange}\n      />\n    );\n  }\n}\n\nconst propTypes = {\n  updateContent: PropTypes.func.isRequired,\n  content: PropTypes.string.isRequired,\n};\n\nclass FileContent extends React.Component {\n  render() {\n    if (err) {\n      return <FileViewTip />;\n    }\n    return (\n      <div className=\"file-view-content flex-1 text-file-view\">\n        <CodeMirror\n          ref=\"code-mirror-editor\"\n          value={this.props.content}\n          options={options}\n          onChange={this.props.updateContent}\n        />\n      </div>\n    );\n  }\n}\n\nFileContent.propTypes = propTypes;\n\nReactDOM.render (\n  <ViewFileText />,\n  document.getElementById('wrapper')\n);\n"],"sourceRoot":""}