{"version":3,"sources":["pages/upload-link/upload-list-item.js","pages/upload-link/forbid-upload-list-item.js","pages/upload-link/upload-progress-dialog.js","pages/upload-link/file-uploader.js","pages/upload-link/index.js"],"names":["UPLOAD_UPLOADING","UPLOAD_ERROR","UPLOAD_ISSAVING","UPLOAD_UPLOADED","UploadListItem","props","onUploadCancel","e","preventDefault","resumableFile","onUploadRetry","formatFileSize","size","toFixed","state","uploadState","nextProps","error","remainingTime","isSaved","this","setState","progress","Math","round","className","newFileName","isUploading","role","style","width","aria-valuenow","aria-valuemin","aria-valuemax","gettext","Utils","formatTime","dangerouslySetInnerHTML","__html","href","onClick","React","Component","ForbidUploadListItem","file","msg","replace","bytesToSize","maxUploadFileSize","name","colSpan","UploadProgressDialog","toggleDropdown","dropdownOpen","onDropdownToggleKeyDown","key","onMenuItemKeyDown","target","click","allFilesUploaded","isOpen","toggle","color","caret","onKeyDown","onFileUpload","onFolderUpload","outline","onCancelAllUploading","disabled","forbidUploadFileList","map","index","uploadFileList","reverse","FileUploader","componentWillUnmount","window","onbeforeunload","dragAndDrop","resumable","disableDropOnDocument","uploader","isUploadProgressDialogShow","totalProgress","bindCallbackHandler","minFileSizeErrorCallback","fileTypeErrorCallback","maxFilesErrorCallback","opts","maxFileSizeErrorCallback","bindEventHandler","on","onChunkingComplete","bind","onFileAdded","onFileProgress","onFileUploadSuccess","onFileError","onUploadStart","onProgress","onComplete","onError","onDragStart","files","errorCount","maxFiles","maxNumberOfFilesForFileupload","message","toaster","danger","push","path","fileName","relativePath","isFile","formData","parent_dir","relative_path","slice","lastIndexOf","length","setUploadFileList","seafileAPI","sharedUploadLinkGetFileUploadUrl","token","then","res","data","upload_link","resumableUpload","catch","errMessage","getErrorMsg","isUploadLinkLoaded","upload","repoID","getFileUploadedBytes","uploadedBytes","blockSize","parseInt","resumableUploadFileBlockSize","offset","floor","markChunksCompleted","filesAddedComplete","registerGlobalVariable","uploadBitrate","getBitrate","item","uniqueIdentifier","lastSize","time","loaded","now","Date","getTime","forEach","timestamp","timeDiff","bitrateInterval","notify","currentTime","JSON","parse","dir_name","indexOf","dirent","id","type","mtime","notifiedFolders","some","errorMessage","retryFileList","success","setHeaders","chunkSize","getOpt","fileSize","startByte","endByte","min","encodeURI","setQuery","generateUniqueIdentifier","webkitRelativePath","MD5","nativeEvent","stopImmediatePropagation","stopPropagation","uploadInput","current","removeAttribute","setAttribute","onCloseUploadDialog","uploadingItem","filter","cancel","retryUploadFile","bootstrap","firedRetry","resumableObj","replaceRepetitionFile","getUpdateLink","cancelFileUpload","pop","currentResumableFile","createRef","Resumablejs","query","fileType","filetypes","undefined","maxFileSize","testMethod","testChunks","headers","withCredentials","simultaneousUploads","fileParameterName","forceChunkSize","maxChunkRetries","minFileSize","assignBrowse","assignDrop","document","getElementById","ref","loggedUser","app","pageOptions","username","uploadLink","dirName","sharedBy","noQuota","SharedUploadLink","direntObject","shareLinksUploadDone","joinPath","HTMLescape","avatar","ReactDOM","render"],"mappings":"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","file":"static/js/uploadLink.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { gettext } from '../../utils/constants';\nimport { Utils } from '../../utils/utils';\n\nconst propTypes = {\n  resumableFile: PropTypes.object.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n};\n\nconst UPLOAD_UPLOADING = 'uploading';\nconst UPLOAD_ERROR = 'error';\nconst UPLOAD_ISSAVING = 'isSaving';\nconst UPLOAD_UPLOADED = 'uploaded';\n\nclass UploadListItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadState: UPLOAD_UPLOADING\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { resumableFile } = nextProps;\n    let uploadState = UPLOAD_UPLOADING;\n\n    if (resumableFile.error) {\n      uploadState = UPLOAD_ERROR;\n    } else {\n      if (resumableFile.remainingTime === 0 && !resumableFile.isSaved) {\n        uploadState = UPLOAD_ISSAVING;\n      }\n\n      if (resumableFile.isSaved) {\n        uploadState = UPLOAD_UPLOADED;\n      }\n    }\n\n    this.setState({uploadState: uploadState});\n  }\n\n  onUploadCancel = (e) => {\n    e.preventDefault();\n    this.props.onUploadCancel(this.props.resumableFile);\n  }\n\n  onUploadRetry = (e) => {\n    e.preventDefault();\n    this.props.onUploadRetry(this.props.resumableFile);\n  }\n\n  formatFileSize = (size) => {\n    if (typeof size !== 'number') {\n      return '';\n    }\n    if (size >= 1000 * 1000 * 1000) {\n      return (size / (1000 * 1000 * 1000)).toFixed(1) + ' G';\n    }\n    if (size >= 1000 * 1000) {\n      return (size / (1000 * 1000)).toFixed(1) + ' M';\n    }\n    if (size >= 1000) {\n      return (size / 1000).toFixed(1) + ' K';\n    }\n    return size.toFixed(1) + ' B';\n  }\n\n  render() {\n    let { resumableFile } = this.props;\n    let progress = Math.round(resumableFile.progress() * 100);\n    let error = resumableFile.error;\n\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{resumableFile.newFileName}</div>\n        </td>\n        <td>\n          <span className=\"file-size\">{this.formatFileSize(resumableFile.size)}</span>\n        </td>\n        <td className=\"upload-progress\">\n          {(this.state.uploadState === UPLOAD_UPLOADING || this.state.uploadState === UPLOAD_ISSAVING) &&\n            <Fragment>\n              {resumableFile.size >= (100 * 1000 * 1000) &&\n                <Fragment>\n                  {resumableFile.isUploading() && (\n                    <div className=\"progress-container\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      {(resumableFile.remainingTime === -1) && <div className=\"progress-text\">{gettext('Preparing to upload...')}</div>}\n                      {(resumableFile.remainingTime > 0) && <div className=\"progress-text\">{gettext('Remaining')}{' '}{Utils.formatTime(resumableFile.remainingTime)}</div>}\n                      {(resumableFile.remainingTime === 0) && <div className=\"progress-text\">{gettext('Indexing...')}</div>}\n                    </div>\n                  )}\n                  {!resumableFile.isUploading() && (\n                    <div className=\"progress-container d-flex align-items-center\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              }\n              {(resumableFile.size < (100 * 1000 * 1000)) &&\n                <div className=\"progress-container d-flex align-items-center\">\n                  <div className=\"progress\">\n                    <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                  </div>\n                </div>\n              }\n            </Fragment>\n          }\n          {this.state.uploadState === UPLOAD_ERROR && (\n            <div className=\"message err-message ml-0\" dangerouslySetInnerHTML={{__html: error}}></div>\n          )}\n        </td>\n        <td className=\"upload-operation\">\n          <Fragment>\n            {this.state.uploadState === UPLOAD_UPLOADING && (\n              <a href=\"#\" onClick={this.onUploadCancel} role=\"button\">{gettext('Cancel')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ERROR && (\n              <a href=\"#\" onClick={this.onUploadRetry} role=\"button\">{gettext('Retry')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ISSAVING && (\n              <span className=\"saving\">{gettext('Saving...')}</span>\n            )}\n            {this.state.uploadState === UPLOAD_UPLOADED && (\n              <span className=\"uploaded\">{gettext('Uploaded')}</span>\n            )}\n          </Fragment>\n        </td>\n      </tr>\n    );\n  }\n}\n\nUploadListItem.propTypes = propTypes;\n\nexport default UploadListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Utils } from '../../utils/utils';\nimport { gettext, maxUploadFileSize } from '../../utils/constants';\n\nconst propTypes = {\n  file: PropTypes.object,\n};\n\nclass ForbidUploadListItem extends React.Component {\n\n  render() {\n    let { file } = this.props;\n    let msg = gettext('Please upload files less than {placeholder}').replace('{placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000));\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{file.name}</div>\n        </td>\n\n        <td colSpan={3} className=\"error\">{msg}</td>\n      </tr>\n    );\n  }\n}\n\nForbidUploadListItem.propTypes = propTypes;\n\nexport default ForbidUploadListItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { gettext } from '../../utils/constants';\nimport UploadListItem from './upload-list-item';\nimport ForbidUploadListItem from './forbid-upload-list-item';\n\nconst propTypes = {\n  uploadFileList: PropTypes.array.isRequired,\n  forbidUploadFileList: PropTypes.array.isRequired,\n  onCancelAllUploading: PropTypes.func.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n  onFileUpload: PropTypes.func.isRequired,\n  onFolderUpload: PropTypes.func.isRequired,\n  allFilesUploaded: PropTypes.bool.isRequired\n};\n\nclass UploadProgressDialog extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropdown = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n\n  onDropdownToggleKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      this.toggleDropdown();\n    }\n  }\n\n  onMenuItemKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      e.target.click();\n    }\n  }\n\n  render() {\n    let { allFilesUploaded } = this.props;\n    return (\n      <Fragment>\n        <div className=\"text-center\">\n          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown}>\n            <DropdownToggle color=\"primary\" caret onKeyDown={this.onDropdownToggleKeyDown}>{gettext('Upload')}</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={this.props.onFileUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Files')}</DropdownItem>\n              <DropdownItem onClick={this.props.onFolderUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Folder')}</DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n          <Button color=\"primary\" outline={true} className=\"ml-4\"\n            onClick={this.props.onCancelAllUploading}\n            disabled={allFilesUploaded}>\n            {gettext('Cancel All')}\n          </Button>\n        </div>\n        <div className=\"mt-4 mh-2\">\n          <table className=\"table-thead-hidden\">\n            <thead>\n              <tr>\n                <th width=\"35%\">{gettext('name')}</th>\n                <th width=\"15%\">{gettext('size')}</th>\n                <th width=\"35%\">{gettext('progress')}</th>\n                <th width=\"15%\">{gettext('state')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.forbidUploadFileList.map((file, index) => {\n                return (<ForbidUploadListItem key={index} file={file} />);\n              })}\n              {this.props.uploadFileList.map((resumableFile, index) => {\n                return (\n                  <UploadListItem\n                    key={index}\n                    resumableFile={resumableFile}\n                    onUploadCancel={this.props.onUploadCancel}\n                    onUploadRetry={this.props.onUploadRetry}\n                  />\n                );\n              }).reverse()\n              }\n            </tbody>\n          </table>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nUploadProgressDialog.propTypes = propTypes;\n\nexport default UploadProgressDialog;\n","// This file is copied from frontend/src/components/file-uploader/file-uploader.js,\n// and modified according to the requirements of this page.\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Resumablejs from '@seafile/resumablejs';\nimport MD5 from 'MD5';\nimport { resumableUploadFileBlockSize, maxUploadFileSize, maxNumberOfFilesForFileupload } from '../../utils/constants';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { Utils } from '../../utils/utils';\nimport { gettext } from '../../utils/constants';\nimport UploadProgressDialog from './upload-progress-dialog';\nimport toaster from '../../components/toast';\n\nimport '../../css/file-uploader.css';\n\nconst propTypes = {\n  dragAndDrop: PropTypes.bool.isRequired,\n  token: PropTypes.string.isRequired,\n  repoID: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n\n  filetypes: PropTypes.array,\n  chunkSize: PropTypes.number,\n  withCredentials: PropTypes.bool,\n  testMethod: PropTypes.string,\n  testChunks: PropTypes.number,\n  simultaneousUploads: PropTypes.number,\n  fileParameterName: PropTypes.string,\n  minFileSizeErrorCallback: PropTypes.func,\n  fileTypeErrorCallback: PropTypes.func,\n  onFileUploadSuccess: PropTypes.func.isRequired,\n};\n\nclass FileUploader extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      retryFileList: [],\n      uploadFileList: [],\n      forbidUploadFileList: [],\n      totalProgress: 0,\n      isUploadProgressDialogShow: false,\n      currentResumableFile: null,\n      uploadBitrate: 0,\n      allFilesUploaded: false,\n    };\n\n    this.uploadInput = React.createRef();\n\n    this.notifiedFolders = [];\n\n    this.timestamp = null;\n    this.loaded = 0;\n    this.bitrateInterval = 500; // Interval in milliseconds to calculate the bitrate\n    this.isUploadLinkLoaded = false;\n\n    window.onbeforeunload = this.onbeforeunload;\n  }\n\n  componentDidMount() {\n    this.resumable = new Resumablejs({\n      target: '',\n      query: this.setQuery || {},\n      fileType: this.props.filetypes,\n      maxFiles: maxNumberOfFilesForFileupload || undefined,\n      maxFileSize: maxUploadFileSize * 1000 * 1000 || undefined,\n      testMethod: this.props.testMethod || 'post',\n      testChunks: this.props.testChunks || false,\n      headers: this.setHeaders || {},\n      withCredentials: this.props.withCredentials || false,\n      chunkSize: parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1 * 1024 * 1024,\n      simultaneousUploads: this.props.simultaneousUploads || 1,\n      fileParameterName: this.props.fileParameterName,\n      generateUniqueIdentifier: this.generateUniqueIdentifier,\n      forceChunkSize: true,\n      maxChunkRetries: 3,\n      minFileSize: 0,\n    });\n\n    this.resumable.assignBrowse(this.uploadInput.current, true);\n    if (this.props.dragAndDrop) {\n      this.resumable.assignDrop(document.getElementById('upload-link-drop-zone'));\n    }\n\n    this.bindCallbackHandler();\n    this.bindEventHandler();\n  }\n\n  componentWillUnmount = () => {\n    window.onbeforeunload = null;\n    if (this.props.dragAndDrop === true) {\n      this.resumable.disableDropOnDocument();\n    }\n  }\n\n  onbeforeunload = () => {\n    if (window.uploader &&\n        window.uploader.isUploadProgressDialogShow &&\n        window.uploader.totalProgress !== 100) {\n      return '';\n    }\n  }\n\n  bindCallbackHandler = () => {\n    let { minFileSizeErrorCallback, fileTypeErrorCallback } = this.props;\n\n    if (this.maxFilesErrorCallback) {\n      this.resumable.opts.maxFilesErrorCallback = this.maxFilesErrorCallback;\n    }\n\n    if (minFileSizeErrorCallback) {\n      this.resumable.opts.minFileSizeErrorCallback = this.props.minFileSizeErrorCallback;\n    }\n\n    if (this.maxFileSizeErrorCallback) {\n      this.resumable.opts.maxFileSizeErrorCallback = this.maxFileSizeErrorCallback;\n    }\n\n    if (fileTypeErrorCallback) {\n      this.resumable.opts.fileTypeErrorCallback = this.props.fileTypeErrorCallback;\n    }\n\n  }\n\n  bindEventHandler = () => {\n    this.resumable.on('chunkingComplete', this.onChunkingComplete.bind(this));\n    this.resumable.on('fileAdded', this.onFileAdded.bind(this));\n    this.resumable.on('fileProgress', this.onFileProgress.bind(this));\n    this.resumable.on('fileSuccess', this.onFileUploadSuccess.bind(this));\n    this.resumable.on('fileError', this.onFileError.bind(this));\n    this.resumable.on('uploadStart', this.onUploadStart.bind(this));\n    this.resumable.on('progress', this.onProgress.bind(this));\n    this.resumable.on('complete', this.onComplete.bind(this));\n    this.resumable.on('error', this.onError.bind(this));\n    this.resumable.on('dragstart', this.onDragStart.bind(this));\n  }\n\n  maxFilesErrorCallback = (files, errorCount) => {\n    let maxFiles = maxNumberOfFilesForFileupload;\n    let message = gettext('Please upload no more than {maxFiles} files at a time.');\n    message = message.replace('{maxFiles}', maxFiles);\n    toaster.danger(message);\n  }\n\n  maxFileSizeErrorCallback = (file) => {\n    let { forbidUploadFileList } = this.state;\n    forbidUploadFileList.push(file);\n    this.setState({forbidUploadFileList: forbidUploadFileList});\n  }\n\n  onChunkingComplete = (resumableFile) => {\n\n    let allFilesUploaded = this.state.allFilesUploaded;\n    if (allFilesUploaded === true) {\n      this.setState({allFilesUploaded: false});\n    }\n\n    let path = this.props.path;\n    let fileName = resumableFile.fileName;\n    let relativePath = resumableFile.relativePath;\n    let isFile = fileName === relativePath;\n\n    resumableFile.formData = {};\n    if (isFile) { // upload file\n      resumableFile.formData  = {\n        parent_dir: path,\n      };\n    } else { // upload folder\n      let relative_path = relativePath.slice(0, relativePath.lastIndexOf('/') + 1);\n      resumableFile.formData  = {\n        parent_dir: path,\n        relative_path: relative_path\n      };\n    }\n  }\n\n  onFileAdded = (resumableFile, files) => {\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (isFile && files.length === 1) {\n      let hasRepetition = false;\n      /*\n      let direntList = this.props.direntList;\n      for (let i = 0; i < direntList.length; i++) {\n        if (direntList[i].type === 'file' && direntList[i].name === resumableFile.fileName) {\n          hasRepetition = true;\n          break;\n        }\n      }\n      */\n      if (hasRepetition) {\n        this.setState({\n          isUploadRemindDialogShow: true,\n          currentResumableFile: resumableFile,\n        });\n      } else {\n        this.setUploadFileList(this.resumable.files);\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumableUpload(resumableFile);\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    } else {\n      this.setUploadFileList(this.resumable.files);\n      if (!this.isUploadLinkLoaded) {\n        this.isUploadLinkLoaded = true;\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumable.upload();\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    }\n  }\n\n  resumableUpload = (resumableFile) => {\n    let { repoID, path } = this.props;\n    seafileAPI.getFileUploadedBytes(repoID, path, resumableFile.fileName).then(res => {\n      let uploadedBytes = res.data.uploadedBytes;\n      let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n      let offset = Math.floor(uploadedBytes / blockSize);\n      resumableFile.markChunksCompleted(offset);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  filesAddedComplete = (resumable, files) => {\n    let { forbidUploadFileList } = this.state;\n    if (forbidUploadFileList.length > 0 && files.length === 0) {\n      this.setState({\n        isUploadProgressDialogShow: true,\n        totalProgress: 100\n      });\n    }\n  }\n\n  setUploadFileList = () => {\n    let uploadFileList = this.resumable.files;\n    this.setState({\n      uploadFileList: uploadFileList,\n      isUploadProgressDialogShow: true,\n    });\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', true);\n  }\n\n  onFileProgress = (resumableFile) => {\n    let uploadBitrate = this.getBitrate();\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        if (uploadBitrate) {\n          let lastSize = (item.size - (item.size * item.progress())) * 8;\n          let time = Math.floor(lastSize / uploadBitrate);\n          item.remainingTime = time;\n        }\n      }\n      return item;\n    });\n\n    this.setState({\n      uploadBitrate: uploadBitrate,\n      uploadFileList: uploadFileList\n    });\n  }\n\n  getBitrate = () => {\n    let loaded = 0;\n    let uploadBitrate = 0;\n    let now = new Date().getTime();\n\n    this.resumable.files.forEach(file => {\n      loaded += file.progress() * file.size;\n    });\n\n    if (this.timestamp) {\n      let timeDiff = (now - this.timestamp);\n      if (timeDiff < this.bitrateInterval) {\n        return this.state.uploadBitrate;\n      }\n\n      // 1. Cancel will produce loaded greater than this.loaded\n      // 2. reset can make this.loaded to be 0\n      if (loaded < this.loaded || this.loaded === 0) {\n        this.loaded = loaded; //\n      }\n\n      uploadBitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n    }\n\n    this.timestamp = now;\n    this.loaded = loaded;\n\n    return uploadBitrate;\n  }\n\n  // start uploading\n  onUploadStart = () => {\n    const message = gettext('File upload started');\n    toaster.notify(message);\n  }\n\n  onProgress = () => {\n    let progress = Math.round(this.resumable.progress() * 100);\n    this.setState({totalProgress: progress});\n    Utils.registerGlobalVariable('uploader', 'totalProgress', progress);\n  }\n\n  onFileUploadSuccess = (resumableFile, message) => {\n    let formData = resumableFile.formData;\n    let currentTime = new Date().getTime()/1000;\n    message = formData.replace ? message : JSON.parse(message)[0];\n    if (formData.relative_path) { // upload folder\n      let relative_path = formData.relative_path;\n      let dir_name = relative_path.slice(0, relative_path.indexOf('/'));\n      let dirent = {\n        id: message.id,\n        name: dir_name,\n        type: 'dir',\n        mtime: currentTime,\n      };\n\n      // update folders cache\n      let isExist = this.notifiedFolders.some(item => {return item.name === dirent.name;});\n      if (!isExist) {\n        this.notifiedFolders.push(dirent);\n        this.props.onFileUploadSuccess(dirent);\n      }\n\n      // update uploadFileList\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = relative_path + message.name;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    if (formData.replace) { // upload file -- replace exist file\n      let fileName = resumableFile.fileName;\n      let dirent = {\n        id: message,\n        name: fileName,\n        type: 'file',\n        mtime: currentTime\n      };\n      this.props.onFileUploadSuccess(dirent); // this contance: just one file\n\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = fileName;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    // upload file -- add files\n    let dirent = {\n      id: message.id,\n      type: 'file',\n      name: message.name,\n      size: message.size,\n      mtime: currentTime,\n    };\n    this.props.onFileUploadSuccess(dirent);\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        item.newFileName = message.name;\n        item.isSaved = true;\n      }\n      return item;\n    });\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onFileError = (resumableFile, message) => {\n    let error = '';\n    if (!message) {\n      error = gettext('Network error');\n    } else {\n      // eg: '{\"error\": \"Internal error\" \\n }'\n      let errorMessage = message.replace(/\\n/g, '');\n      errorMessage  = JSON.parse(errorMessage);\n      error = errorMessage.error;\n      if (error === 'File locked by others.') {\n        error = gettext('File is locked by others.');\n      }\n      if (error === 'Internal error.') {\n        error = gettext('Internal Server Error');\n      }\n    }\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        this.state.retryFileList.push(item);\n        item.error = error;\n      }\n      return item;\n    });\n\n    this.loaded = 0;  // reset loaded data;\n    this.setState({\n      retryFileList: this.state.retryFileList,\n      uploadFileList: uploadFileList\n    });\n  }\n\n  onComplete = () => {\n    if (!this.error) {\n      const message = gettext('All files uploaded');\n      toaster.success(message);\n    }\n    this.error = false; // reset it\n\n    this.notifiedFolders = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({allFilesUploaded: true});\n  }\n\n  onError = (message, file) => {\n    let msg = gettext('Error');\n    if (file && file.fileName) {\n      msg = gettext('Failed to upload {file_name}.')\n        .replace('{file_name}', file.fileName);\n    }\n    toaster.danger(msg, {'id': 'file-error-msg'});\n    this.error = true;\n\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    // After the error, the user can switch windows\n    Utils.registerGlobalVariable('uploader', 'totalProgress', 100);\n  }\n\n  setHeaders = (resumableFile, resumable) => {\n    let offset = resumable.offset;\n    let chunkSize = resumable.getOpt('chunkSize');\n    let fileSize = resumableFile.size === 0 ? 1 : resumableFile.size;\n    let startByte = offset !== 0 ? offset * chunkSize : 0;\n    let endByte = Math.min(fileSize, (offset + 1) * chunkSize) - 1;\n\n    if (fileSize - resumable.endByte < chunkSize && !resumable.getOpt('forceChunkSize')) {\n      endByte = fileSize;\n    }\n\n    let headers = {\n      'Accept': 'application/json; text/javascript, */*; q=0.01',\n      'Content-Disposition': 'attachment; filename=\"' + encodeURI(resumableFile.fileName) + '\"',\n      'Content-Range': 'bytes ' + startByte + '-' + endByte + '/' + fileSize,\n    };\n\n    return headers;\n  }\n\n  setQuery = (resumableFile) => {\n    let formData = resumableFile.formData;\n    return formData;\n  }\n\n  generateUniqueIdentifier = (file) => {\n    let relativePath = file.webkitRelativePath||file.relativePath||file.fileName||file.name;\n    return MD5(relativePath + new Date()) + relativePath;\n  }\n\n  onClick = (e) => {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n  }\n\n  onFileUpload = () => {\n    this.uploadInput.current.removeAttribute('webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onFolderUpload = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onDragStart = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n  }\n\n  onCloseUploadDialog = () => {\n    this.loaded = 0;\n    this.resumable.files = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({isUploadProgressDialogShow: false, uploadFileList: [], forbidUploadFileList: []});\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', false);\n  }\n\n  onUploadCancel = (uploadingItem) => {\n\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (item.uniqueIdentifier === uploadingItem.uniqueIdentifier) {\n        item.cancel(); // execute cancel function will delete the file at the same time\n        return false;\n      }\n      return true;\n    });\n\n    if (!this.resumable.isUploading()) {\n      this.setState({\n        totalProgress: '100',\n        allFilesUploaded: true,\n      });\n      this.loaded = 0;\n    }\n\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onCancelAllUploading = () => {\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (Math.round(item.progress() !== 1)) {\n        item.cancel();\n        return false;\n      }\n      return true;\n    });\n\n    this.loaded = 0;\n\n    this.setState({\n      allFilesUploaded: true,\n      totalProgress: '100',\n      uploadFileList: uploadFileList\n    });\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n  }\n\n  onUploadRetry = (resumableFile) => {\n    seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n      this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n      let retryFileList = this.state.retryFileList.filter(item => {\n        return item.uniqueIdentifier !== resumableFile.uniqueIdentifier;\n      });\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.error = null;\n          this.retryUploadFile(item);\n        }\n        return item;\n      });\n\n      this.setState({\n        retryFileList: retryFileList,\n        uploadFileList: uploadFileList\n      });\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  retryUploadFile = (resumableFile) => {\n    let { repoID, path } = this.props;\n    let fileName = resumableFile.fileName;\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (!isFile) {\n      let relative_path = resumableFile.formData.relative_path;\n      let prefix = path === '/' ? (path + relative_path) : (path + '/' + relative_path);\n      fileName = prefix + fileName;\n    }\n\n    resumableFile.bootstrap();\n    var firedRetry = false;\n    resumableFile.resumableObj.on('chunkingComplete', () => {\n      if(!firedRetry) {\n        seafileAPI.getFileUploadedBytes(repoID, path, fileName).then(res => {\n          let uploadedBytes = res.data.uploadedBytes;\n          let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n          let offset = Math.floor(uploadedBytes / blockSize);\n          resumableFile.markChunksCompleted(offset);\n\n          resumableFile.resumableObj.upload();\n\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n      firedRetry = true;\n    });\n\n  }\n\n  replaceRepetitionFile = () => {\n    let { repoID, path } = this.props;\n    seafileAPI.getUpdateLink(repoID, path).then(res => {\n      this.resumable.opts.target = res.data;\n\n      let resumableFile = this.resumable.files[this.resumable.files.length - 1];\n      resumableFile.formData['replace'] = 1;\n      resumableFile.formData['target_file'] = resumableFile.formData.parent_dir + resumableFile.fileName;\n      this.setUploadFileList(this.resumable.files);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  cancelFileUpload = () => {\n    this.resumable.files.pop(); //delete latest file；\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"file-uploader-container\">\n          <div className=\"file-uploader\">\n            <input className=\"upload-input\" type=\"file\" ref={this.uploadInput} onClick={this.onClick} />\n          </div>\n        </div>\n        <UploadProgressDialog\n          retryFileList={this.state.retryFileList}\n          uploadFileList={this.state.uploadFileList}\n          forbidUploadFileList={this.state.forbidUploadFileList}\n          totalProgress={this.state.totalProgress}\n          uploadBitrate={this.state.uploadBitrate}\n          allFilesUploaded={this.state.allFilesUploaded}\n          onCloseUploadDialog={this.onCloseUploadDialog}\n          onCancelAllUploading={this.onCancelAllUploading}\n          onUploadCancel={this.onUploadCancel}\n          onUploadRetry={this.onUploadRetry}\n          onFileUpload={this.onFileUpload}\n          onFolderUpload={this.onFolderUpload}\n        />\n      </Fragment>\n    );\n  }\n}\n\nFileUploader.propTypes = propTypes;\n\nexport default FileUploader;\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Utils } from '../../utils/utils';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { gettext } from '../../utils/constants';\nimport Logo from '../../components/logo';\nimport Account from '../../components/common/account';\nimport FileUploader from './file-uploader';\n\nimport '../../css/upload-link.css';\n\nconst loggedUser = window.app.pageOptions.username;\nconst {\n  dirName,\n  sharedBy,\n  noQuota,\n  maxUploadFileSize,\n  token,\n  repoID,\n  path\n} = window.uploadLink;\n\n\nclass SharedUploadLink extends React.Component {\n\n  onFileUploadSuccess = (direntObject) => {\n    const { name, size } = direntObject;\n    seafileAPI.shareLinksUploadDone(token, Utils.joinPath(path, name));\n  }\n\n  render() {\n    return (\n      <div className=\"h-100 d-flex flex-column\">\n        <div className=\"top-header d-flex justify-content-between\">\n          <Logo />\n          {loggedUser && <Account />}\n        </div>\n        <div className=\"o-auto\">\n          <div className=\"py-4 px-6 mx-auto rounded\" id=\"upload-link-panel\">\n            <h3 className=\"h5\" dangerouslySetInnerHTML={{__html: gettext('Upload files to {folder_name_placeholder}')\n              .replace('{folder_name_placeholder}', `<span class=\"op-target\">${Utils.HTMLescape(dirName)}</span>`)}}></h3>\n            <p className=\"small shared-by\" dangerouslySetInnerHTML={{__html: `${gettext('shared by:')} ${sharedBy.avatar} ${sharedBy.name}`}}></p>\n            {noQuota ? (\n              <div className=\"py-6 text-center\">\n                <span className=\"sf3-font sf3-font-tips warning-icon\"></span>\n                <p>{gettext('The owner of this library has run out of space.')}</p>\n              </div>\n            ) : (\n              <Fragment>\n                <ol className=\"small text-gray\">\n                  <li className=\"tip-list-item\">{gettext('Folder upload is limited to Chrome, Firefox 50+, and Microsoft Edge.')}</li>\n                  {maxUploadFileSize && <li className=\"tip-list-item\">{gettext('File size should be smaller than {max_size_placeholder}.').replace('{max_size_placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000))}</li>}\n                </ol>\n                <div id=\"upload-link-drop-zone\" className=\"text-center mt-2 mb-4\">\n                  <span className=\"sf3-font sf3-font-upload upload-icon\"></span>\n                  <p className=\"small text-gray mb-0\">{gettext('Drag and drop files or folders here.')}</p>\n                </div>\n                <FileUploader\n                  ref={uploader => this.uploader = uploader}\n                  dragAndDrop={true}\n                  token={token}\n                  repoID={repoID}\n                  path={path}\n                  onFileUploadSuccess={this.onFileUploadSuccess}\n                />\n              </Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <SharedUploadLink />,\n  document.getElementById('wrapper')\n);\n"],"sourceRoot":""}