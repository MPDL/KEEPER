{"version":3,"sources":["pages/upload-link/upload-list-item.js","pages/upload-link/forbid-upload-list-item.js","pages/upload-link/upload-progress-dialog.js","pages/upload-link/file-uploader.js","pages/upload-link/index.js"],"names":["UPLOAD_UPLOADING","UPLOAD_ERROR","UPLOAD_ISSAVING","UPLOAD_UPLOADED","UploadListItem","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","onUploadCancel","e","preventDefault","resumableFile","onUploadRetry","formatFileSize","size","toFixed","state","uploadState","_createClass","key","value","nextProps","error","remainingTime","isSaved","this","setState","progress","Math","round","_jsxs","className","children","_jsx","newFileName","Fragment","isUploading","role","style","width","concat","gettext","Utils","formatTime","dangerouslySetInnerHTML","__html","href","onClick","React","Component","ForbidUploadListItem","apply","arguments","file","msg","replace","bytesToSize","maxUploadFileSize","name","colSpan","UploadProgressDialog","toggleDropdown","dropdownOpen","onDropdownToggleKeyDown","onMenuItemKeyDown","target","click","_this2","allFilesUploaded","ButtonDropdown","isOpen","toggle","DropdownToggle","color","caret","onKeyDown","DropdownMenu","DropdownItem","onFileUpload","onFolderUpload","Button","outline","onCancelAllUploading","disabled","forbidUploadFileList","map","index","uploadFileList","reverse","FileUploader","componentWillUnmount","window","onbeforeunload","dragAndDrop","resumable","disableDropOnDocument","uploader","isUploadProgressDialogShow","totalProgress","bindCallbackHandler","_this$props","minFileSizeErrorCallback","fileTypeErrorCallback","maxFilesErrorCallback","opts","maxFileSizeErrorCallback","bindEventHandler","on","onChunkingComplete","bind","_assertThisInitialized","onFileAdded","onFileProgress","onFileUploadSuccess","onFileError","onUploadStart","onProgress","onComplete","onError","onDragStart","files","errorCount","maxFiles","maxNumberOfFilesForFileupload","message","toaster","danger","push","path","fileName","relativePath","isFile","formData","parent_dir","relative_path","slice","lastIndexOf","length","setUploadFileList","seafileAPI","sharedUploadLinkGetFileUploadUrl","token","then","res","data","upload_link","resumableUpload","catch","errMessage","getErrorMsg","isUploadLinkLoaded","upload","_this$props2","repoID","getFileUploadedBytes","uploadedBytes","blockSize","parseInt","resumableUploadFileBlockSize","offset","floor","markChunksCompleted","filesAddedComplete","registerGlobalVariable","uploadBitrate","getBitrate","item","uniqueIdentifier","lastSize","time","loaded","now","Date","getTime","forEach","timestamp","timeDiff","bitrateInterval","notify","currentTime","JSON","parse","dir_name","indexOf","dirent","id","type","mtime","notifiedFolders","some","errorMessage","retryFileList","success","setHeaders","chunkSize","getOpt","fileSize","startByte","endByte","min","encodeURI","setQuery","generateUniqueIdentifier","webkitRelativePath","MD5","nativeEvent","stopImmediatePropagation","stopPropagation","uploadInput","current","removeAttribute","setAttribute","onCloseUploadDialog","uploadingItem","filter","cancel","retryUploadFile","_this$props3","bootstrap","firedRetry","resumableObj","replaceRepetitionFile","_this$props4","getUpdateLink","cancelFileUpload","pop","currentResumableFile","createRef","Resumablejs","query","fileType","filetypes","undefined","maxFileSize","testMethod","testChunks","headers","withCredentials","simultaneousUploads","fileParameterName","forceChunkSize","maxChunkRetries","minFileSize","assignBrowse","assignDrop","document","getElementById","ref","loggedUser","app","pageOptions","username","_window$uploadLink","uploadLink","dirName","sharedBy","noQuota","SharedUploadLink","_len","args","Array","_key","direntObject","shareLinksUploadDone","joinPath","Logo","Account","HTMLescape","avatar","ReactDom","render"],"mappings":"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","file":"static/js/uploadLink.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { gettext } from '../../utils/constants';\nimport { Utils } from '../../utils/utils';\n\nconst propTypes = {\n  resumableFile: PropTypes.object.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n};\n\nconst UPLOAD_UPLOADING = 'uploading';\nconst UPLOAD_ERROR = 'error';\nconst UPLOAD_ISSAVING = 'isSaving';\nconst UPLOAD_UPLOADED = 'uploaded';\n\nclass UploadListItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadState: UPLOAD_UPLOADING\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { resumableFile } = nextProps;\n    let uploadState = UPLOAD_UPLOADING;\n\n    if (resumableFile.error) {\n      uploadState = UPLOAD_ERROR;\n    } else {\n      if (resumableFile.remainingTime === 0 && !resumableFile.isSaved) {\n        uploadState = UPLOAD_ISSAVING;\n      }\n\n      if (resumableFile.isSaved) {\n        uploadState = UPLOAD_UPLOADED;\n      }\n    }\n\n    this.setState({uploadState: uploadState});\n  }\n\n  onUploadCancel = (e) => {\n    e.preventDefault();\n    this.props.onUploadCancel(this.props.resumableFile);\n  }\n\n  onUploadRetry = (e) => {\n    e.preventDefault();\n    this.props.onUploadRetry(this.props.resumableFile);\n  }\n\n  formatFileSize = (size) => {\n    if (typeof size !== 'number') {\n      return '';\n    }\n    if (size >= 1000 * 1000 * 1000) {\n      return (size / (1000 * 1000 * 1000)).toFixed(1) + ' G';\n    }\n    if (size >= 1000 * 1000) {\n      return (size / (1000 * 1000)).toFixed(1) + ' M';\n    }\n    if (size >= 1000) {\n      return (size / 1000).toFixed(1) + ' K';\n    }\n    return size.toFixed(1) + ' B';\n  }\n\n  render() {\n    let { resumableFile } = this.props;\n    let progress = Math.round(resumableFile.progress() * 100);\n    let error = resumableFile.error;\n\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{resumableFile.newFileName}</div>\n        </td>\n        <td>\n          <span className=\"file-size\">{this.formatFileSize(resumableFile.size)}</span>\n        </td>\n        <td className=\"upload-progress\">\n          {(this.state.uploadState === UPLOAD_UPLOADING || this.state.uploadState === UPLOAD_ISSAVING) &&\n            <Fragment>\n              {resumableFile.size >= (100 * 1000 * 1000) &&\n                <Fragment>\n                  {resumableFile.isUploading() && (\n                    <div className=\"progress-container\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      {(resumableFile.remainingTime === -1) && <div className=\"progress-text\">{gettext('Preparing to upload...')}</div>}\n                      {(resumableFile.remainingTime > 0) && <div className=\"progress-text\">{gettext('Remaining')}{' '}{Utils.formatTime(resumableFile.remainingTime)}</div>}\n                      {(resumableFile.remainingTime === 0) && <div className=\"progress-text\">{gettext('Indexing...')}</div>}\n                    </div>\n                  )}\n                  {!resumableFile.isUploading() && (\n                    <div className=\"progress-container d-flex align-items-center\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              }\n              {(resumableFile.size < (100 * 1000 * 1000)) &&\n                <div className=\"progress-container d-flex align-items-center\">\n                  <div className=\"progress\">\n                    <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                  </div>\n                </div>\n              }\n            </Fragment>\n          }\n          {this.state.uploadState === UPLOAD_ERROR && (\n            <div className=\"message err-message ml-0\" dangerouslySetInnerHTML={{__html: error}}></div>\n          )}\n        </td>\n        <td className=\"upload-operation\">\n          <Fragment>\n            {this.state.uploadState === UPLOAD_UPLOADING && (\n              <a href=\"#\" onClick={this.onUploadCancel} role=\"button\">{gettext('Cancel')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ERROR && (\n              <a href=\"#\" onClick={this.onUploadRetry} role=\"button\">{gettext('Retry')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ISSAVING && (\n              <span className=\"saving\">{gettext('Saving...')}</span>\n            )}\n            {this.state.uploadState === UPLOAD_UPLOADED && (\n              <span className=\"uploaded\">{gettext('Uploaded')}</span>\n            )}\n          </Fragment>\n        </td>\n      </tr>\n    );\n  }\n}\n\nUploadListItem.propTypes = propTypes;\n\nexport default UploadListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Utils } from '../../utils/utils';\nimport { gettext, maxUploadFileSize } from '../../utils/constants';\n\nconst propTypes = {\n  file: PropTypes.object,\n};\n\nclass ForbidUploadListItem extends React.Component {\n\n  render() {\n    let { file } = this.props;\n    let msg = gettext('Please upload files less than {placeholder}').replace('{placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000));\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{file.name}</div>\n        </td>\n\n        <td colSpan={3} className=\"error\">{msg}</td>\n      </tr>\n    );\n  }\n}\n\nForbidUploadListItem.propTypes = propTypes;\n\nexport default ForbidUploadListItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { gettext } from '../../utils/constants';\nimport UploadListItem from './upload-list-item';\nimport ForbidUploadListItem from './forbid-upload-list-item';\n\nconst propTypes = {\n  uploadFileList: PropTypes.array.isRequired,\n  forbidUploadFileList: PropTypes.array.isRequired,\n  onCancelAllUploading: PropTypes.func.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n  onFileUpload: PropTypes.func.isRequired,\n  onFolderUpload: PropTypes.func.isRequired,\n  allFilesUploaded: PropTypes.bool.isRequired\n};\n\nclass UploadProgressDialog extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropdown = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n\n  onDropdownToggleKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      this.toggleDropdown();\n    }\n  }\n\n  onMenuItemKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      e.target.click();\n    }\n  }\n\n  render() {\n    let { allFilesUploaded } = this.props;\n    return (\n      <Fragment>\n        <div className=\"text-center\">\n          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown}>\n            <DropdownToggle color=\"primary\" caret onKeyDown={this.onDropdownToggleKeyDown}>{gettext('Upload')}</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={this.props.onFileUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Files')}</DropdownItem>\n              <DropdownItem onClick={this.props.onFolderUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Folder')}</DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n          <Button color=\"primary\" outline={true} className=\"ml-4\"\n            onClick={this.props.onCancelAllUploading}\n            disabled={allFilesUploaded}>\n            {gettext('Cancel All')}\n          </Button>\n        </div>\n        <div className=\"mt-4 mh-2\">\n          <table className=\"table-thead-hidden\">\n            <thead>\n              <tr>\n                <th width=\"35%\">{gettext('name')}</th>\n                <th width=\"15%\">{gettext('size')}</th>\n                <th width=\"35%\">{gettext('progress')}</th>\n                <th width=\"15%\">{gettext('state')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.forbidUploadFileList.map((file, index) => {\n                return (<ForbidUploadListItem key={index} file={file} />);\n              })}\n              {this.props.uploadFileList.map((resumableFile, index) => {\n                return (\n                  <UploadListItem\n                    key={index}\n                    resumableFile={resumableFile}\n                    onUploadCancel={this.props.onUploadCancel}\n                    onUploadRetry={this.props.onUploadRetry}\n                  />\n                );\n              }).reverse()\n              }\n            </tbody>\n          </table>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nUploadProgressDialog.propTypes = propTypes;\n\nexport default UploadProgressDialog;\n","// This file is copied from frontend/src/components/file-uploader/file-uploader.js,\n// and modified according to the requirements of this page.\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Resumablejs from '@seafile/resumablejs';\nimport MD5 from 'MD5';\nimport { resumableUploadFileBlockSize, maxUploadFileSize, maxNumberOfFilesForFileupload } from '../../utils/constants';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { Utils } from '../../utils/utils';\nimport { gettext } from '../../utils/constants';\nimport UploadProgressDialog from './upload-progress-dialog';\nimport toaster from '../../components/toast';\n\nimport '../../css/file-uploader.css';\n\nconst propTypes = {\n  dragAndDrop: PropTypes.bool.isRequired,\n  token: PropTypes.string.isRequired,\n  repoID: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n\n  filetypes: PropTypes.array,\n  chunkSize: PropTypes.number,\n  withCredentials: PropTypes.bool,\n  testMethod: PropTypes.string,\n  testChunks: PropTypes.number,\n  simultaneousUploads: PropTypes.number,\n  fileParameterName: PropTypes.string,\n  minFileSizeErrorCallback: PropTypes.func,\n  fileTypeErrorCallback: PropTypes.func,\n  onFileUploadSuccess: PropTypes.func.isRequired,\n};\n\nclass FileUploader extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      retryFileList: [],\n      uploadFileList: [],\n      forbidUploadFileList: [],\n      totalProgress: 0,\n      isUploadProgressDialogShow: false,\n      currentResumableFile: null,\n      uploadBitrate: 0,\n      allFilesUploaded: false,\n    };\n\n    this.uploadInput = React.createRef();\n\n    this.notifiedFolders = [];\n\n    this.timestamp = null;\n    this.loaded = 0;\n    this.bitrateInterval = 500; // Interval in milliseconds to calculate the bitrate\n    this.isUploadLinkLoaded = false;\n\n    window.onbeforeunload = this.onbeforeunload;\n  }\n\n  componentDidMount() {\n    this.resumable = new Resumablejs({\n      target: '',\n      query: this.setQuery || {},\n      fileType: this.props.filetypes,\n      maxFiles: maxNumberOfFilesForFileupload || undefined,\n      maxFileSize: maxUploadFileSize * 1000 * 1000 || undefined,\n      testMethod: this.props.testMethod || 'post',\n      testChunks: this.props.testChunks || false,\n      headers: this.setHeaders || {},\n      withCredentials: this.props.withCredentials || false,\n      chunkSize: parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1 * 1024 * 1024,\n      simultaneousUploads: this.props.simultaneousUploads || 1,\n      fileParameterName: this.props.fileParameterName,\n      generateUniqueIdentifier: this.generateUniqueIdentifier,\n      forceChunkSize: true,\n      maxChunkRetries: 3,\n      minFileSize: 0,\n    });\n\n    this.resumable.assignBrowse(this.uploadInput.current, true);\n    if (this.props.dragAndDrop) {\n      this.resumable.assignDrop(document.getElementById('upload-link-drop-zone'));\n    }\n\n    this.bindCallbackHandler();\n    this.bindEventHandler();\n  }\n\n  componentWillUnmount = () => {\n    window.onbeforeunload = null;\n    if (this.props.dragAndDrop === true) {\n      this.resumable.disableDropOnDocument();\n    }\n  }\n\n  onbeforeunload = () => {\n    if (window.uploader &&\n        window.uploader.isUploadProgressDialogShow &&\n        window.uploader.totalProgress !== 100) {\n      return '';\n    }\n  }\n\n  bindCallbackHandler = () => {\n    let { minFileSizeErrorCallback, fileTypeErrorCallback } = this.props;\n\n    if (this.maxFilesErrorCallback) {\n      this.resumable.opts.maxFilesErrorCallback = this.maxFilesErrorCallback;\n    }\n\n    if (minFileSizeErrorCallback) {\n      this.resumable.opts.minFileSizeErrorCallback = this.props.minFileSizeErrorCallback;\n    }\n\n    if (this.maxFileSizeErrorCallback) {\n      this.resumable.opts.maxFileSizeErrorCallback = this.maxFileSizeErrorCallback;\n    }\n\n    if (fileTypeErrorCallback) {\n      this.resumable.opts.fileTypeErrorCallback = this.props.fileTypeErrorCallback;\n    }\n\n  }\n\n  bindEventHandler = () => {\n    this.resumable.on('chunkingComplete', this.onChunkingComplete.bind(this));\n    this.resumable.on('fileAdded', this.onFileAdded.bind(this));\n    this.resumable.on('fileProgress', this.onFileProgress.bind(this));\n    this.resumable.on('fileSuccess', this.onFileUploadSuccess.bind(this));\n    this.resumable.on('fileError', this.onFileError.bind(this));\n    this.resumable.on('uploadStart', this.onUploadStart.bind(this));\n    this.resumable.on('progress', this.onProgress.bind(this));\n    this.resumable.on('complete', this.onComplete.bind(this));\n    this.resumable.on('error', this.onError.bind(this));\n    this.resumable.on('dragstart', this.onDragStart.bind(this));\n  }\n\n  maxFilesErrorCallback = (files, errorCount) => {\n    let maxFiles = maxNumberOfFilesForFileupload;\n    let message = gettext('Please upload no more than {maxFiles} files at a time.');\n    message = message.replace('{maxFiles}', maxFiles);\n    toaster.danger(message);\n  }\n\n  maxFileSizeErrorCallback = (file) => {\n    let { forbidUploadFileList } = this.state;\n    forbidUploadFileList.push(file);\n    this.setState({forbidUploadFileList: forbidUploadFileList});\n  }\n\n  onChunkingComplete = (resumableFile) => {\n\n    let allFilesUploaded = this.state.allFilesUploaded;\n    if (allFilesUploaded === true) {\n      this.setState({allFilesUploaded: false});\n    }\n\n    let path = this.props.path;\n    let fileName = resumableFile.fileName;\n    let relativePath = resumableFile.relativePath;\n    let isFile = fileName === relativePath;\n\n    resumableFile.formData = {};\n    if (isFile) { // upload file\n      resumableFile.formData  = {\n        parent_dir: path,\n      };\n    } else { // upload folder\n      let relative_path = relativePath.slice(0, relativePath.lastIndexOf('/') + 1);\n      resumableFile.formData  = {\n        parent_dir: path,\n        relative_path: relative_path\n      };\n    }\n  }\n\n  onFileAdded = (resumableFile, files) => {\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (isFile && files.length === 1) {\n      let hasRepetition = false;\n      /*\n      let direntList = this.props.direntList;\n      for (let i = 0; i < direntList.length; i++) {\n        if (direntList[i].type === 'file' && direntList[i].name === resumableFile.fileName) {\n          hasRepetition = true;\n          break;\n        }\n      }\n      */\n      if (hasRepetition) {\n        this.setState({\n          isUploadRemindDialogShow: true,\n          currentResumableFile: resumableFile,\n        });\n      } else {\n        this.setUploadFileList(this.resumable.files);\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumableUpload(resumableFile);\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    } else {\n      this.setUploadFileList(this.resumable.files);\n      if (!this.isUploadLinkLoaded) {\n        this.isUploadLinkLoaded = true;\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumable.upload();\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    }\n  }\n\n  resumableUpload = (resumableFile) => {\n    let { repoID, path } = this.props;\n    seafileAPI.getFileUploadedBytes(repoID, path, resumableFile.fileName).then(res => {\n      let uploadedBytes = res.data.uploadedBytes;\n      let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n      let offset = Math.floor(uploadedBytes / blockSize);\n      resumableFile.markChunksCompleted(offset);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  filesAddedComplete = (resumable, files) => {\n    let { forbidUploadFileList } = this.state;\n    if (forbidUploadFileList.length > 0 && files.length === 0) {\n      this.setState({\n        isUploadProgressDialogShow: true,\n        totalProgress: 100\n      });\n    }\n  }\n\n  setUploadFileList = () => {\n    let uploadFileList = this.resumable.files;\n    this.setState({\n      uploadFileList: uploadFileList,\n      isUploadProgressDialogShow: true,\n    });\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', true);\n  }\n\n  onFileProgress = (resumableFile) => {\n    let uploadBitrate = this.getBitrate();\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        if (uploadBitrate) {\n          let lastSize = (item.size - (item.size * item.progress())) * 8;\n          let time = Math.floor(lastSize / uploadBitrate);\n          item.remainingTime = time;\n        }\n      }\n      return item;\n    });\n\n    this.setState({\n      uploadBitrate: uploadBitrate,\n      uploadFileList: uploadFileList\n    });\n  }\n\n  getBitrate = () => {\n    let loaded = 0;\n    let uploadBitrate = 0;\n    let now = new Date().getTime();\n\n    this.resumable.files.forEach(file => {\n      loaded += file.progress() * file.size;\n    });\n\n    if (this.timestamp) {\n      let timeDiff = (now - this.timestamp);\n      if (timeDiff < this.bitrateInterval) {\n        return this.state.uploadBitrate;\n      }\n\n      // 1. Cancel will produce loaded greater than this.loaded\n      // 2. reset can make this.loaded to be 0\n      if (loaded < this.loaded || this.loaded === 0) {\n        this.loaded = loaded; //\n      }\n\n      uploadBitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n    }\n\n    this.timestamp = now;\n    this.loaded = loaded;\n\n    return uploadBitrate;\n  }\n\n  // start uploading\n  onUploadStart = () => {\n    const message = gettext('File upload started');\n    toaster.notify(message);\n  }\n\n  onProgress = () => {\n    let progress = Math.round(this.resumable.progress() * 100);\n    this.setState({totalProgress: progress});\n    Utils.registerGlobalVariable('uploader', 'totalProgress', progress);\n  }\n\n  onFileUploadSuccess = (resumableFile, message) => {\n    let formData = resumableFile.formData;\n    let currentTime = new Date().getTime()/1000;\n    message = formData.replace ? message : JSON.parse(message)[0];\n    if (formData.relative_path) { // upload folder\n      let relative_path = formData.relative_path;\n      let dir_name = relative_path.slice(0, relative_path.indexOf('/'));\n      let dirent = {\n        id: message.id,\n        name: dir_name,\n        type: 'dir',\n        mtime: currentTime,\n      };\n\n      // update folders cache\n      let isExist = this.notifiedFolders.some(item => {return item.name === dirent.name;});\n      if (!isExist) {\n        this.notifiedFolders.push(dirent);\n        this.props.onFileUploadSuccess(dirent);\n      }\n\n      // update uploadFileList\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = relative_path + message.name;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    if (formData.replace) { // upload file -- replace exist file\n      let fileName = resumableFile.fileName;\n      let dirent = {\n        id: message,\n        name: fileName,\n        type: 'file',\n        mtime: currentTime\n      };\n      this.props.onFileUploadSuccess(dirent); // this contance: just one file\n\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = fileName;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    // upload file -- add files\n    let dirent = {\n      id: message.id,\n      type: 'file',\n      name: message.name,\n      size: message.size,\n      mtime: currentTime,\n    };\n    this.props.onFileUploadSuccess(dirent);\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        item.newFileName = message.name;\n        item.isSaved = true;\n      }\n      return item;\n    });\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onFileError = (resumableFile, message) => {\n    let error = '';\n    if (!message) {\n      error = gettext('Network error');\n    } else {\n      // eg: '{\"error\": \"Internal error\" \\n }'\n      let errorMessage = message.replace(/\\n/g, '');\n      errorMessage  = JSON.parse(errorMessage);\n      error = errorMessage.error;\n      if (error === 'File locked by others.') {\n        error = gettext('File is locked by others.');\n      }\n      if (error === 'Internal error.') {\n        error = gettext('Internal Server Error');\n      }\n    }\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        this.state.retryFileList.push(item);\n        item.error = error;\n      }\n      return item;\n    });\n\n    this.loaded = 0;  // reset loaded data;\n    this.setState({\n      retryFileList: this.state.retryFileList,\n      uploadFileList: uploadFileList\n    });\n  }\n\n  onComplete = () => {\n    if (!this.error) {\n      const message = gettext('All files uploaded');\n      toaster.success(message);\n    }\n    this.error = false; // reset it\n\n    this.notifiedFolders = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({allFilesUploaded: true});\n  }\n\n  onError = (message, file) => {\n    let msg = gettext('Error');\n    if (file && file.fileName) {\n      msg = gettext('Failed to upload {file_name}.')\n        .replace('{file_name}', file.fileName);\n    }\n    toaster.danger(msg, {'id': 'file-error-msg'});\n    this.error = true;\n\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    // After the error, the user can switch windows\n    Utils.registerGlobalVariable('uploader', 'totalProgress', 100);\n  }\n\n  setHeaders = (resumableFile, resumable) => {\n    let offset = resumable.offset;\n    let chunkSize = resumable.getOpt('chunkSize');\n    let fileSize = resumableFile.size === 0 ? 1 : resumableFile.size;\n    let startByte = offset !== 0 ? offset * chunkSize : 0;\n    let endByte = Math.min(fileSize, (offset + 1) * chunkSize) - 1;\n\n    if (fileSize - resumable.endByte < chunkSize && !resumable.getOpt('forceChunkSize')) {\n      endByte = fileSize;\n    }\n\n    let headers = {\n      'Accept': 'application/json; text/javascript, */*; q=0.01',\n      'Content-Disposition': 'attachment; filename=\"' + encodeURI(resumableFile.fileName) + '\"',\n      'Content-Range': 'bytes ' + startByte + '-' + endByte + '/' + fileSize,\n    };\n\n    return headers;\n  }\n\n  setQuery = (resumableFile) => {\n    let formData = resumableFile.formData;\n    return formData;\n  }\n\n  generateUniqueIdentifier = (file) => {\n    let relativePath = file.webkitRelativePath||file.relativePath||file.fileName||file.name;\n    return MD5(relativePath + new Date()) + relativePath;\n  }\n\n  onClick = (e) => {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n  }\n\n  onFileUpload = () => {\n    this.uploadInput.current.removeAttribute('webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onFolderUpload = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n    this.uploadInput.current.click();\n  }\n\n  onDragStart = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n  }\n\n  onCloseUploadDialog = () => {\n    this.loaded = 0;\n    this.resumable.files = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({isUploadProgressDialogShow: false, uploadFileList: [], forbidUploadFileList: []});\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', false);\n  }\n\n  onUploadCancel = (uploadingItem) => {\n\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (item.uniqueIdentifier === uploadingItem.uniqueIdentifier) {\n        item.cancel(); // execute cancel function will delete the file at the same time\n        return false;\n      }\n      return true;\n    });\n\n    if (!this.resumable.isUploading()) {\n      this.setState({\n        totalProgress: '100',\n        allFilesUploaded: true,\n      });\n      this.loaded = 0;\n    }\n\n    this.setState({uploadFileList: uploadFileList});\n  }\n\n  onCancelAllUploading = () => {\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (Math.round(item.progress() !== 1)) {\n        item.cancel();\n        return false;\n      }\n      return true;\n    });\n\n    this.loaded = 0;\n\n    this.setState({\n      allFilesUploaded: true,\n      totalProgress: '100',\n      uploadFileList: uploadFileList\n    });\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n  }\n\n  onUploadRetry = (resumableFile) => {\n    seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n      this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n      let retryFileList = this.state.retryFileList.filter(item => {\n        return item.uniqueIdentifier !== resumableFile.uniqueIdentifier;\n      });\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.error = null;\n          this.retryUploadFile(item);\n        }\n        return item;\n      });\n\n      this.setState({\n        retryFileList: retryFileList,\n        uploadFileList: uploadFileList\n      });\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  retryUploadFile = (resumableFile) => {\n    let { repoID, path } = this.props;\n    let fileName = resumableFile.fileName;\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (!isFile) {\n      let relative_path = resumableFile.formData.relative_path;\n      let prefix = path === '/' ? (path + relative_path) : (path + '/' + relative_path);\n      fileName = prefix + fileName;\n    }\n\n    resumableFile.bootstrap();\n    var firedRetry = false;\n    resumableFile.resumableObj.on('chunkingComplete', () => {\n      if(!firedRetry) {\n        seafileAPI.getFileUploadedBytes(repoID, path, fileName).then(res => {\n          let uploadedBytes = res.data.uploadedBytes;\n          let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n          let offset = Math.floor(uploadedBytes / blockSize);\n          resumableFile.markChunksCompleted(offset);\n\n          resumableFile.resumableObj.upload();\n\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n      firedRetry = true;\n    });\n\n  }\n\n  replaceRepetitionFile = () => {\n    let { repoID, path } = this.props;\n    seafileAPI.getUpdateLink(repoID, path).then(res => {\n      this.resumable.opts.target = res.data;\n\n      let resumableFile = this.resumable.files[this.resumable.files.length - 1];\n      resumableFile.formData['replace'] = 1;\n      resumableFile.formData['target_file'] = resumableFile.formData.parent_dir + resumableFile.fileName;\n      this.setUploadFileList(this.resumable.files);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  }\n\n  cancelFileUpload = () => {\n    this.resumable.files.pop(); //delete latest file；\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"file-uploader-container\">\n          <div className=\"file-uploader\">\n            <input className=\"upload-input\" type=\"file\" ref={this.uploadInput} onClick={this.onClick} />\n          </div>\n        </div>\n        <UploadProgressDialog\n          retryFileList={this.state.retryFileList}\n          uploadFileList={this.state.uploadFileList}\n          forbidUploadFileList={this.state.forbidUploadFileList}\n          totalProgress={this.state.totalProgress}\n          uploadBitrate={this.state.uploadBitrate}\n          allFilesUploaded={this.state.allFilesUploaded}\n          onCloseUploadDialog={this.onCloseUploadDialog}\n          onCancelAllUploading={this.onCancelAllUploading}\n          onUploadCancel={this.onUploadCancel}\n          onUploadRetry={this.onUploadRetry}\n          onFileUpload={this.onFileUpload}\n          onFolderUpload={this.onFolderUpload}\n        />\n      </Fragment>\n    );\n  }\n}\n\nFileUploader.propTypes = propTypes;\n\nexport default FileUploader;\n","import React, { Fragment } from 'react';\nimport ReactDom from 'react-dom';\nimport { Utils } from '../../utils/utils';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { gettext } from '../../utils/constants';\nimport Logo from '../../components/logo';\nimport Account from '../../components/common/account';\nimport FileUploader from './file-uploader';\n\nimport '../../css/upload-link.css';\n\nconst loggedUser = window.app.pageOptions.username;\nconst {\n  dirName,\n  sharedBy,\n  noQuota,\n  maxUploadFileSize,\n  token,\n  repoID,\n  path\n} = window.uploadLink;\n\n\nclass SharedUploadLink extends React.Component {\n\n  onFileUploadSuccess = (direntObject) => {\n    const { name, size } = direntObject;\n    seafileAPI.shareLinksUploadDone(token, Utils.joinPath(path, name));\n  }\n\n  render() {\n    return (\n      <div className=\"h-100 d-flex flex-column\">\n        <div className=\"top-header d-flex justify-content-between\">\n          <Logo />\n          {loggedUser && <Account />}\n        </div>\n        <div className=\"o-auto\">\n          <div className=\"py-4 px-6 mx-auto rounded\" id=\"upload-link-panel\">\n            <h3 className=\"h5\" dangerouslySetInnerHTML={{__html: gettext('Upload files to {folder_name_placeholder}')\n              .replace('{folder_name_placeholder}', `<span class=\"op-target\">${Utils.HTMLescape(dirName)}</span>`)}}></h3>\n            <p className=\"small shared-by\" dangerouslySetInnerHTML={{__html: `${gettext('shared by:')} ${sharedBy.avatar} ${sharedBy.name}`}}></p>\n            {noQuota ? (\n              <div className=\"py-6 text-center\">\n                <span className=\"sf3-font sf3-font-tips warning-icon\"></span>\n                <p>{gettext('The owner of this library has run out of space.')}</p>\n              </div>\n            ) : (\n              <Fragment>\n                <ol className=\"small text-gray\">\n                  <li className=\"tip-list-item\">{gettext('Folder upload is limited to Chrome, Firefox 50+, and Microsoft Edge.')}</li>\n                  {maxUploadFileSize && <li className=\"tip-list-item\">{gettext('File size should be smaller than {max_size_placeholder}.').replace('{max_size_placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000))}</li>}\n                </ol>\n                <div id=\"upload-link-drop-zone\" className=\"text-center mt-2 mb-4\">\n                  <span className=\"sf3-font sf3-font-upload upload-icon\"></span>\n                  <p className=\"small text-gray mb-0\">{gettext('Drag and drop files or folders here.')}</p>\n                </div>\n                <FileUploader\n                  ref={uploader => this.uploader = uploader}\n                  dragAndDrop={true}\n                  token={token}\n                  repoID={repoID}\n                  path={path}\n                  onFileUploadSuccess={this.onFileUploadSuccess}\n                />\n              </Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDom.render(<SharedUploadLink />, document.getElementById('wrapper'));\n"],"sourceRoot":""}